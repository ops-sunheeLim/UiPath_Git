<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ubac="clr-namespace:UiPath.BAF.Activities.ContextModel;assembly=UiPath.Slack.Activities" xmlns:ube="clr-namespace:UiPath.BAF.Enums;assembly=UiPath.Slack" xmlns:ubme="clr-namespace:UiPath.BAF.Models.Entity;assembly=UiPath.Slack" xmlns:ubmv="clr-namespace:UiPath.BAF.Models.Views;assembly=UiPath.Slack" xmlns:ubt="clr-namespace:UiPath.BAF.Telemetry;assembly=UiPath.Slack" xmlns:ucm="clr-namespace:UiPath.CodeGen.Model;assembly=UiPath.Slack" xmlns:ucmc="clr-namespace:UiPath.CodeGen.Models.Connection;assembly=UiPath.Slack" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:usa="clr-namespace:UiPath.Slack.Activities;assembly=UiPath.Slack.Activities" xmlns:usam="clr-namespace:UiPath.Slack.Activities.Messages;assembly=UiPath.Slack.Activities" xmlns:use="clr-namespace:UiPath.Slack.Enums;assembly=UiPath.Slack" xmlns:usm="clr-namespace:UiPath.Slack.Models;assembly=UiPath.Slack" xmlns:usm1="clr-namespace:UiPath.Slack.Model;assembly=UiPath.Slack" xmlns:uss="clr-namespace:UiPath.Slack.Services;assembly=UiPath.Slack" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Allows the Orchestrator queue name to be passed as an argument, instead of only being defined in the configuration file." Name="in_OrchestratorQueueName" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1392,865.6</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Main2_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="31">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>SendSlackMessage</x:String>
      <x:String>UiPath.Slack.Enums</x:String>
      <x:String>UiPath.BAF.Enums</x:String>
      <x:String>UiPath.Swagger.Models</x:String>
      <x:String>UiPath.CodeGen.Models.Connection</x:String>
      <x:String>UiPath.Slack.Models</x:String>
      <x:String>UiPath.BAF.Models.Connection</x:String>
      <x:String>UiPath.BAF.Models.Connection.APIConnection</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.BAF.Telemetry</x:String>
      <x:String>UiPath.BAF.Activities.ContextModel</x:String>
      <x:String>UiPath.BAF.Models</x:String>
      <x:String>UiPath.BAF.ServiceInterfaces</x:String>
      <x:String>UiPath.BAF.Models.Entity</x:String>
      <x:String>UiPath.BAF.Models.CrudOperation</x:String>
      <x:String>UiPath.BAF.Models.Response</x:String>
      <x:String>UiPath.Slack.Activities</x:String>
      <x:String>UiPath.CodeGen.Activities</x:String>
      <x:String>UiPath.BAF.Activities</x:String>
      <x:String>UiPath.Slack.Activities.Messages</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="82">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>SendSlackMessage</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.GSuite.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Slack</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>UiPath.Slack.Activities</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldCollapseAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <StateMachine InitialState="{x:Reference __ReferenceID5}" sap2010:Annotation.AnnotationText="[Process title]CXI_신사업본부_Relayo전환_Catalogyo그룹추가_자동화&#xA;[Process description] 가게 등록 및 복사 후 Relayo 전환 및 카탈로그요 그룹 추가 자동화 &#xA;[Additional information (e.g., author, contact information and applications involved and required external setup)]" DisplayName="General Business Process" sap:VirtualizedContainerService.HintSize="752,800.8" sap2010:WorkflowViewState.IdRef="StateMachine_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <av:Point x:Key="ShapeLocation">70,22.5</av:Point>
        <x:Double x:Key="StateContainerWidth">718</x:Double>
        <x:Double x:Key="StateContainerHeight">704</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">130,60.1 160,60.1 160,61.3 223,61.3</av:PointCollection>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <State x:Name="__ReferenceID3" sap2010:Annotation.AnnotationText="Process a single transaction. &#xA;The result of the processing can be: 1) Success, 2) System Exception. &#xA;In the case of a system exception, the transaction can be automatically retried." DisplayName="Process Transaction" sap:VirtualizedContainerService.HintSize="230.4,194.4" sap2010:WorkflowViewState.IdRef="State_3">
      <State.Entry>
        <TryCatch DisplayName="Try to process transaction" sap:VirtualizedContainerService.HintSize="436.8,437.6" sap2010:WorkflowViewState.IdRef="TryCatch_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch.Try>
            <Sequence DisplayName="Process the current TransactionItem" sap:VirtualizedContainerService.HintSize="375.2,206.4" sap2010:WorkflowViewState.IdRef="Sequence_28">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Process workflow" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_24" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Process.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_gsuiteKeypath">[gsuiteKeypath]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_gsuiteUserEmail">[gsuiteUserEmail]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_gsuiteClientID">[gsuiteClientID]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_gsuiteClientSecret">[gsuiteClientSecret]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_gsuiteUser">[gsuiteUser]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeWorkflowFile>
            </Sequence>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="403.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_10">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                </ActivityAction.Argument>
                <Sequence sap:VirtualizedContainerService.HintSize="200,68.8" sap2010:WorkflowViewState.IdRef="Sequence_30">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Set transaction status to SystemException" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_27">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Exception">[SystemException]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Exception">[Exception]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
          <TryCatch.Finally>
            <TryCatch DisplayName="Set the transaction status and move to process the next transaction" sap:VirtualizedContainerService.HintSize="438,314" sap2010:WorkflowViewState.IdRef="TryCatch_8">
              <TryCatch.Try>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SetTransactionStatus workflow" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_25" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\SetTransactionStatus.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                    <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">[TransactionItem]</InArgument>
                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_RetryNumber">[RetryNumber]</InOutArgument>
                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TransactionNumber">[TransactionNumber]</InOutArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField1">[TransactionField1]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField2">[TransactionField2]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionID">[TransactionID]</InArgument>
                    <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException">[SystemException]</InArgument>
                    <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException">[BusinessException]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <ui:LogMessage DisplayName="Log message (Failed to set transaction status)" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_32" Level="Fatal" Message="[&quot;SetTransactionStatus.xaml failed: &quot;+exception.Message+&quot; at Source: &quot;+exception.Source]" />
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
            </TryCatch>
          </TryCatch.Finally>
        </TryCatch>
      </State.Entry>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">234.5,261.5</av:Point>
          <av:Size x:Key="ShapeSize">230.4,194.4</av:Size>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
          <x:Double x:Key="StateContainerWidth">197</x:Double>
          <x:Double x:Key="StateContainerHeight">34</x:Double>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <State.Transitions>
        <Transition DisplayName="Retry Limit" sap:VirtualizedContainerService.HintSize="559.2,908" sap2010:WorkflowViewState.IdRef="Transition_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <av:PointCollection x:Key="ConnectorLocation">464.9,339.26 494.9,339.26 494.9,616.26 422,616.26</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">28</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">40</x:Int32>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <State x:Name="__ReferenceID1" sap2010:Annotation.AnnotationText="End process and close all applications used." DisplayName="End Process" sap:VirtualizedContainerService.HintSize="144,123.2" sap2010:WorkflowViewState.IdRef="State_1" IsFinal="True">
              <State.Entry>
                <Sequence sap:VirtualizedContainerService.HintSize="480,431" sap2010:WorkflowViewState.IdRef="Sequence_31">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch DisplayName="Try to close all aplications" sap:VirtualizedContainerService.HintSize="438,339" sap2010:WorkflowViewState.IdRef="TryCatch_4">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <TryCatch.Try>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CloseAllApplications workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_21" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\CloseAllApplications.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <scg:Dictionary x:TypeArguments="x:String, Argument" />
                        </ui:InvokeWorkflowFile.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsPinned">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeWorkflowFile>
                    </TryCatch.Try>
                    <TryCatch.Catches>
                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ActivityAction x:TypeArguments="s:Exception">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Failed to close applications, so kill processes" sap:VirtualizedContainerService.HintSize="376,335" sap2010:WorkflowViewState.IdRef="Sequence_26">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:LogMessage DisplayName="Log message (Failed to close applications)" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_31" Level="Warn" Message="[&quot;Applications failed to close gracefully. &quot;+Exception.Message+&quot; at Source: &quot;+Exception.Source]">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:LogMessage>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke KillAllProcesses workflow (End process)" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_22" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <scg:Dictionary x:TypeArguments="x:String, Argument" />
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                          </Sequence>
                        </ActivityAction>
                      </Catch>
                    </TryCatch.Catches>
                  </TryCatch>
                </Sequence>
              </State.Entry>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">278,548.5</av:Point>
                  <av:Size x:Key="ShapeSize">144,123.2</av:Size>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  <x:Double x:Key="StateContainerWidth">110</x:Double>
                  <x:Double x:Key="StateContainerHeight">26.000000000000114</x:Double>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </State>
          </Transition.To>
          <Transition.Action>
            <usa:SlackScopeActivity Connection="{x:Null}" ExistingConnection="{x:Null}" SwaggerClient="{x:Null}" DesignConnectionEnabled="True" DisplayName="Slack Scope" ExistingConnectionType="usm:SlackConnection" sap:VirtualizedContainerService.HintSize="459.2,480.8" sap2010:WorkflowViewState.IdRef="SlackScopeActivity_1" RefreshCacheEnabled="False" Scopes="PublicChannels, PrivateChannels, DirectMessage, GroupMessage, Files, Users, Chat, UserGroups, Calls, DND, Emoji, Identity, Pins, Reminders, Reactions, Stars" SelectedAuthType="API Token" SelectedDesignAuthType="API Token" TelemetryEnabled="False" ThrowExceptionOnError="False">
              <usa:SlackScopeActivity.Body>
                <ActivityAction x:TypeArguments="ubac:ScopeActivityContext">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ubac:ScopeActivityContext" Name="ScopeActivityContext" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="실행" sap:VirtualizedContainerService.HintSize="425.6,329.6" sap2010:WorkflowViewState.IdRef="Sequence_33">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <usam:SendMessage BusinessEntityName="{x:Null}" ScopeActivityType="{x:Null}" Status="{x:Null}" ConfiguredBusinessEntity="SendMessage" CrudOperation="Function" DesignConnectionEnabled="True" DisplayName="Send Message" sap:VirtualizedContainerService.HintSize="384,236.8" sap2010:WorkflowViewState.IdRef="SendMessage_2">
                      <usam:SendMessage.BusinessEntity>
                        <ubme:BusinessEntity AuthFields="{x:Null}" Connection="{x:Null}" Id="{x:Null}" Metadata="{x:Reference __ReferenceID0}" Name="SendMessage">
                          <ubme:BusinessEntity.AllFields>
                            <scg:List x:TypeArguments="ubme:EntityField" Capacity="0" />
                          </ubme:BusinessEntity.AllFields>
                          <ubme:BusinessEntity.EntityMetadata>
                            <ubme:EntityMetadata Description="{x:Null}" PrimaryFields="{x:Null}" EligibleOperations="-1" IsCustomEntity="False" Name="SendMessage">
                              <ubme:EntityMetadata.Metadata>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object" x:Name="__ReferenceID0" />
                              </ubme:EntityMetadata.Metadata>
                            </ubme:EntityMetadata>
                          </ubme:BusinessEntity.EntityMetadata>
                          <ubme:BusinessEntity.SelectedFields>
                            <scg:List x:TypeArguments="ubme:EntityField" Capacity="0" />
                          </ubme:BusinessEntity.SelectedFields>
                          <ubme:BusinessEntity.TelemetryProperties>
                            <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                          </ubme:BusinessEntity.TelemetryProperties>
                        </ubme:BusinessEntity>
                      </usam:SendMessage.BusinessEntity>
                      <usam:SendMessage.PopulatedAPIParameters>
                        <scg:Dictionary x:TypeArguments="x:String, ubme:EntityField" />
                      </usam:SendMessage.PopulatedAPIParameters>
                      <usam:SendMessage.SelectedFields>
                        <scg:List x:TypeArguments="ubme:EntityField" Capacity="8">
                          <ucm:CodeGenEntityField x:TypeArguments="use:ConversationType" ArgumentValue="{x:Null}" ContainingType="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" ArgumentDirection="In" ArgumentType="use:ConversationType" DataType="ConversationType" Description="메시지를 가져올 대화 유형" DisplayName="Conversation Type" FieldName="Conversation Type" FormDataType="ComboBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="True">
                            <ucm:CodeGenEntityField.DefaultValue>
                              <use:ConversationType>Channel</use:ConversationType>
                            </ucm:CodeGenEntityField.DefaultValue>
                            <ucm:CodeGenEntityField.Value>
                              <use:ConversationType>Channel</use:ConversationType>
                            </ucm:CodeGenEntityField.Value>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="채널의 이름" DisplayName="Channel Name" FieldName="Channel Name" FormDataType="TextBoxWithButton" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                            <ucm:CodeGenEntityField.Metadata>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <ube:WindowType x:Key="WindowType">FindObject</ube:WindowType>
                                <ubmv:FindObjectInput ParentQuery="{x:Null}" ParentQueryLabel="{x:Null}" Query="{x:Null}" x:Key="WindowTypeInput" IsMultiSelectAllowed="False" ObjectType="Channel" ReturnColumn="Name" ShouldLoadOnStart="False" WindowName="Channel">
                                  <ubmv:FindObjectInput.ColumnsToShow>
                                    <scg:List x:TypeArguments="x:String" Capacity="4">
                                      <x:String>Id</x:String>
                                      <x:String>Name</x:String>
                                    </scg:List>
                                  </ubmv:FindObjectInput.ColumnsToShow>
                                  <ubmv:FindObjectInput.Metadata>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:String x:Key="ChannelTypesKey">public_channel,private_channel</x:String>
                                    </scg:Dictionary>
                                  </ubmv:FindObjectInput.Metadata>
                                  <ubmv:FindObjectInput.QueryFilterColumns>
                                    <scg:List x:TypeArguments="x:String" Capacity="4">
                                      <x:String>Id</x:String>
                                      <x:String>Name</x:String>
                                    </scg:List>
                                  </ubmv:FindObjectInput.QueryFilterColumns>
                                </ubmv:FindObjectInput>
                              </scg:Dictionary>
                            </ucm:CodeGenEntityField.Metadata>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="채널의 ID" DisplayName="Channel ID" FieldName="Channel ID" FormDataType="ExpressionTextBox" InArgumentValue="[Config(&quot;Slack_Channel_error&quot;).ToString]" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                            <ucm:CodeGenEntityField.ArgumentValue>
                              <InArgument x:TypeArguments="x:String">[Config("Slack_Channel_error").ToString]</InArgument>
                            </ucm:CodeGenEntityField.ArgumentValue>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="전송할 메시지" DisplayName="Text" FieldName="Text" FormDataType="ExpressionTextBox" InArgumentValue="[&quot;&lt;!here&gt;&lt;@U04JC0MLJMP&gt;&quot; +Environment.NewLine + &quot;[&quot;+Config(&quot;ProcessName&quot;).ToString+&quot;]&quot; + Environment.NewLine +&#xA;Config(&quot;LogMessage_ApplicationException&quot;).ToString+&quot; Retry: &quot;+RetryNumber.ToString + Environment.NewLine +&#xA;SystemException.Message.ToString+&quot; at Source: &quot;+ Environment.NewLine +&#xA;SystemException.Source.ToString]" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                            <ucm:CodeGenEntityField.ArgumentValue>
                              <InArgument x:TypeArguments="x:String" xml:space="preserve">["&lt;!here&gt;&lt;@U04JC0MLJMP&gt;" +Environment.NewLine + "["+Config("ProcessName").ToString+"]" + Environment.NewLine +
Config("LogMessage_ApplicationException").ToString+" Retry: "+RetryNumber.ToString + Environment.NewLine +
SystemException.Message.ToString+" at Source: "+ Environment.NewLine +
SystemException.Source.ToString]</InArgument>
                            </ucm:CodeGenEntityField.ArgumentValue>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="메시지에 첨부할 파일" DisplayName="File" FieldName="File" FormDataType="FilePicker" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                          <ucm:CodeGenEntityField x:TypeArguments="x:Boolean" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:Boolean" DataType="Boolean" Description="이 메시지를 사용자 또는 봇으로 전송합니다. 기본값은 true(사용자로 전송)입니다." DisplayName="As User" FieldName="As User" FormDataType="ExpressionTextBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                          <ucm:CodeGenEntityField x:TypeArguments="usm1:Message" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="Out" ArgumentType="usm1:Message" DataType="Message" Description="전송된 메시지" DisplayName="Message" FieldName="Message" FormDataType="ExpressionTextBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                        </scg:List>
                      </usam:SendMessage.SelectedFields>
                      <usam:SendMessage.ServiceFactory>
                        <uss:SlackServiceFactory />
                      </usam:SendMessage.ServiceFactory>
                      <usam:SendMessage.TelemetryProperties>
                        <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                      </usam:SendMessage.TelemetryProperties>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsPinned">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </usam:SendMessage>
                  </Sequence>
                </ActivityAction>
              </usa:SlackScopeActivity.Body>
              <usa:SlackScopeActivity.ConnectionParameters>
                <scg:List x:TypeArguments="ucmc:ConnectionParam" Capacity="4">
                  <ucmc:ConnectionParam Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" Description="OAuth 액세스 토큰" Mandatory="True" Name="API Token">
                    <ucmc:ConnectionParam.ArgumentValue>
                      <InArgument x:TypeArguments="x:String">[Config("Slack_botToken").ToString]</InArgument>
                    </ucmc:ConnectionParam.ArgumentValue>
                  </ucmc:ConnectionParam>
                </scg:List>
              </usa:SlackScopeActivity.ConnectionParameters>
              <usa:SlackScopeActivity.DesignConnectionParameters>
                <scg:List x:TypeArguments="ucmc:ConnectionParam" Capacity="4">
                  <ucmc:ConnectionParam ArgumentValue="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" Description="OAuth 액세스 토큰" Mandatory="True" Name="API Token" Value="Config(&quot;Slack_userToken&quot;).ToString" />
                </scg:List>
              </usa:SlackScopeActivity.DesignConnectionParameters>
              <usa:SlackScopeActivity.DesignConnectionRequest>
                <usm:SlackConnectionParameters APIKey="{x:Null}" BaseUrl="{x:Null}" BearerToken="{x:Null}" ClientId="{x:Null}" ClientSecret="{x:Null}" ConfigFileClient="{x:Null}" ConfigFilePath="{x:Null}" ExistingConnection="{x:Null}" JWTToken="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" PersonalAccessTokenName="{x:Null}" PersonalAccessTokenSecret="{x:Null}" SwaggerClient="{x:Null}" Username="{x:Null}" APIToken="Config(&quot;Slack_UserToken&quot;).ToString" AuthType="ApiToken">
                  <usm:SlackConnectionParameters.Scopes>
                    <use:SlackScopes>PublicChannels, PrivateChannels, DirectMessage, GroupMessage, Files, Users, Chat, UserGroups, Calls, DND, Emoji, Identity, Pins, Reminders, Reactions, Stars</use:SlackScopes>
                  </usm:SlackConnectionParameters.Scopes>
                </usm:SlackConnectionParameters>
              </usa:SlackScopeActivity.DesignConnectionRequest>
              <usa:SlackScopeActivity.ServiceFactory>
                <uss:SlackServiceFactory />
              </usa:SlackScopeActivity.ServiceFactory>
              <usa:SlackScopeActivity.SupportedAuthTypes>
                <scg:List x:TypeArguments="x:String" Capacity="4">
                  <x:String>Existing Connection</x:String>
                  <x:String>OAuth Authorization Code</x:String>
                  <x:String>API Token</x:String>
                </scg:List>
              </usa:SlackScopeActivity.SupportedAuthTypes>
              <usa:SlackScopeActivity.TelemetryProperties>
                <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
              </usa:SlackScopeActivity.TelemetryProperties>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </usa:SlackScopeActivity>
          </Transition.Action>
          <Transition.Condition>
            <mva:VisualBasicValue x:TypeArguments="x:Boolean" ExpressionText="RetryNumber &gt;= Convert.ToInt32(Config(&quot;MaxRetryNumber&quot;))" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_1" />
          </Transition.Condition>
        </Transition>
        <Transition DisplayName="System Exception" sap:VirtualizedContainerService.HintSize="559.2,1543.2" sap2010:WorkflowViewState.IdRef="Transition_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:PointCollection x:Key="ConnectorLocation">464.9,339.26 494.9,339.26 494.9,66.58 476.6,66.58</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">28</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">40</x:Int32>
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <State x:Name="__ReferenceID5" sap2010:Annotation.AnnotationText="Read configuration file and initialize applications used in the process." DisplayName="Initialization" sap:VirtualizedContainerService.HintSize="253.6,105.6" sap2010:WorkflowViewState.IdRef="State_2">
              <State.Entry>
                <TryCatch DisplayName="Try initializing settings and applications" sap:VirtualizedContainerService.HintSize="697.6,1642.4" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch.Try>
                    <Sequence DisplayName="Load configurations and open applications" sap:VirtualizedContainerService.HintSize="660.8,1411.2" sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Assign SystemException (initialization)" sap:VirtualizedContainerService.HintSize="619.2,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                        <Assign.To>
                          <OutArgument x:TypeArguments="s:Exception">[SystemException]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="s:Exception">[Nothing]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <If sap2010:Annotation.AnnotationText="An uninitialized Config dictionary indicates that it is the first run of the process." Condition="[Config is Nothing]" DisplayName="If first run, read local configuration file" sap:VirtualizedContainerService.HintSize="619.2,1064.8" sap2010:WorkflowViewState.IdRef="If_1">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">True</x:Boolean>
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence DisplayName="First run" sap:VirtualizedContainerService.HintSize="375.2,874.4" sap2010:WorkflowViewState.IdRef="Sequence_17">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitAllSettings workflow" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\InitAllSettings.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">Data\Config.xlsx</InArgument>
                                <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">[{"Settings", "Constants"}]</InArgument>
                                <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_Config">[Config]</OutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                            <If sap2010:Annotation.AnnotationText="Overwrite queue name from in configuration file in case the argument in_OrchestratorQueueName is specified.&#xA;This provides backward compatibility with &lt; 2018.3." Condition="[Not String.IsNullOrWhiteSpace(in_OrchestratorQueueName)]" DisplayName="If in_OrchestratorQueueName is specified" sap:VirtualizedContainerService.HintSize="333.6,176.8" sap2010:WorkflowViewState.IdRef="If_10">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Assign DisplayName="Assign OrchestratorQueueName" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_20">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[Config("OrchestratorQueueName")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Object">[in_OrchestratorQueueName]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Kills all Windows processes representing applications used in this business process to assure that the execution starts in a clean state.&#xA;Since the applications are assumed to be already closed, CloseAllApplications is skipped and just KillAllProcess is invoked." DisplayName="Invoke KillAllProcesses workflow (first run)" sap:VirtualizedContainerService.HintSize="333.6,224.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <scg:Dictionary x:TypeArguments="x:String, Argument" />
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the process name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (BusinessProcessName)" sap:VirtualizedContainerService.HintSize="333.6,146.4" sap2010:WorkflowViewState.IdRef="AddLogFields_2">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="logF_BusinessProcessName">[Config("logF_BusinessProcessName").ToString]</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke KillAllProcesses workflow" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_26" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <scg:Dictionary x:TypeArguments="x:String, Argument" />
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                        </If.Else>
                      </If>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitiAllApplications workflow" sap:VirtualizedContainerService.HintSize="619.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Framework\InitAllApplications.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsPinned">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeWorkflowFile>
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="664,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                        </ActivityAction.Argument>
                        <Assign sap2010:Annotation.AnnotationText="Failures during the initialization are considered system exceptions and lead to the End Process state, thus finalizing the execution." DisplayName="Assign SystemException" sap:VirtualizedContainerService.HintSize="263.2,60" sap2010:WorkflowViewState.IdRef="Assign_21">
                          <Assign.To>
                            <OutArgument x:TypeArguments="s:Exception">[SystemException]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="s:Exception">[Exception]</InArgument>
                          </Assign.Value>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </Assign>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </State.Entry>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">223,8.5</av:Point>
                  <av:Size x:Key="ShapeSize">253.6,105.6</av:Size>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  <x:Double x:Key="StateContainerWidth">220</x:Double>
                  <x:Double x:Key="StateContainerHeight">25</x:Double>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <State.Transitions>
                <Transition DisplayName="init System Exception" sap:VirtualizedContainerService.HintSize="559.2,908" sap2010:WorkflowViewState.IdRef="Transition_8">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">349.8,114.1 349.8,144.1 199.8,144.1 199.8,616.26 278,616.26</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">41</x:Int32>
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID1</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <usa:SlackScopeActivity Connection="{x:Null}" ExistingConnection="{x:Null}" SwaggerClient="{x:Null}" DesignConnectionEnabled="True" DisplayName="Slack Scope" ExistingConnectionType="usm:SlackConnection" sap:VirtualizedContainerService.HintSize="459.2,480.8" sap2010:WorkflowViewState.IdRef="SlackScopeActivity_3" RefreshCacheEnabled="False" Scopes="PublicChannels, PrivateChannels, DirectMessage, GroupMessage, Files, Users, Chat, UserGroups, Calls, DND, Emoji, Identity, Pins, Reminders, Reactions, Stars" SelectedAuthType="API Token" SelectedDesignAuthType="API Token" TelemetryEnabled="False" ThrowExceptionOnError="False">
                      <usa:SlackScopeActivity.Body>
                        <ActivityAction x:TypeArguments="ubac:ScopeActivityContext">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="ubac:ScopeActivityContext" Name="ScopeActivityContext" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="실행" sap:VirtualizedContainerService.HintSize="425.6,329.6" sap2010:WorkflowViewState.IdRef="Sequence_35">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <usam:SendMessage BusinessEntityName="{x:Null}" ScopeActivityType="{x:Null}" Status="{x:Null}" ConfiguredBusinessEntity="SendMessage" CrudOperation="Function" DesignConnectionEnabled="True" DisplayName="Send Message" sap:VirtualizedContainerService.HintSize="384,236.8" sap2010:WorkflowViewState.IdRef="SendMessage_4">
                              <usam:SendMessage.BusinessEntity>
                                <ubme:BusinessEntity AuthFields="{x:Null}" Connection="{x:Null}" Id="{x:Null}" Metadata="{x:Reference __ReferenceID2}" Name="SendMessage">
                                  <ubme:BusinessEntity.AllFields>
                                    <scg:List x:TypeArguments="ubme:EntityField" Capacity="0" />
                                  </ubme:BusinessEntity.AllFields>
                                  <ubme:BusinessEntity.EntityMetadata>
                                    <ubme:EntityMetadata Description="{x:Null}" PrimaryFields="{x:Null}" EligibleOperations="-1" IsCustomEntity="False" Name="SendMessage">
                                      <ubme:EntityMetadata.Metadata>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object" x:Name="__ReferenceID2" />
                                      </ubme:EntityMetadata.Metadata>
                                    </ubme:EntityMetadata>
                                  </ubme:BusinessEntity.EntityMetadata>
                                  <ubme:BusinessEntity.SelectedFields>
                                    <scg:List x:TypeArguments="ubme:EntityField" Capacity="0" />
                                  </ubme:BusinessEntity.SelectedFields>
                                  <ubme:BusinessEntity.TelemetryProperties>
                                    <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                                  </ubme:BusinessEntity.TelemetryProperties>
                                </ubme:BusinessEntity>
                              </usam:SendMessage.BusinessEntity>
                              <usam:SendMessage.PopulatedAPIParameters>
                                <scg:Dictionary x:TypeArguments="x:String, ubme:EntityField" />
                              </usam:SendMessage.PopulatedAPIParameters>
                              <usam:SendMessage.SelectedFields>
                                <scg:List x:TypeArguments="ubme:EntityField" Capacity="8">
                                  <ucm:CodeGenEntityField x:TypeArguments="use:ConversationType" ArgumentValue="{x:Null}" ContainingType="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" ArgumentDirection="In" ArgumentType="use:ConversationType" DataType="ConversationType" Description="메시지를 가져올 대화 유형" DisplayName="Conversation Type" FieldName="Conversation Type" FormDataType="ComboBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="True">
                                    <ucm:CodeGenEntityField.DefaultValue>
                                      <use:ConversationType>Channel</use:ConversationType>
                                    </ucm:CodeGenEntityField.DefaultValue>
                                    <ucm:CodeGenEntityField.Value>
                                      <use:ConversationType>Channel</use:ConversationType>
                                    </ucm:CodeGenEntityField.Value>
                                  </ucm:CodeGenEntityField>
                                  <ucm:CodeGenEntityField x:TypeArguments="x:String" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="채널의 이름" DisplayName="Channel Name" FieldName="Channel Name" FormDataType="TextBoxWithButton" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                                    <ucm:CodeGenEntityField.Metadata>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <ube:WindowType x:Key="WindowType">FindObject</ube:WindowType>
                                        <ubmv:FindObjectInput ParentQuery="{x:Null}" ParentQueryLabel="{x:Null}" Query="{x:Null}" x:Key="WindowTypeInput" IsMultiSelectAllowed="False" ObjectType="Channel" ReturnColumn="Name" ShouldLoadOnStart="False" WindowName="Channel">
                                          <ubmv:FindObjectInput.ColumnsToShow>
                                            <scg:List x:TypeArguments="x:String" Capacity="4">
                                              <x:String>Id</x:String>
                                              <x:String>Name</x:String>
                                            </scg:List>
                                          </ubmv:FindObjectInput.ColumnsToShow>
                                          <ubmv:FindObjectInput.Metadata>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:String x:Key="ChannelTypesKey">public_channel,private_channel</x:String>
                                            </scg:Dictionary>
                                          </ubmv:FindObjectInput.Metadata>
                                          <ubmv:FindObjectInput.QueryFilterColumns>
                                            <scg:List x:TypeArguments="x:String" Capacity="4">
                                              <x:String>Id</x:String>
                                              <x:String>Name</x:String>
                                            </scg:List>
                                          </ubmv:FindObjectInput.QueryFilterColumns>
                                        </ubmv:FindObjectInput>
                                      </scg:Dictionary>
                                    </ucm:CodeGenEntityField.Metadata>
                                  </ucm:CodeGenEntityField>
                                  <ucm:CodeGenEntityField x:TypeArguments="x:String" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="채널의 ID" DisplayName="Channel ID" FieldName="Channel ID" FormDataType="ExpressionTextBox" InArgumentValue="[Config(&quot;Slack_Channel_error&quot;).ToString]" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                                    <ucm:CodeGenEntityField.ArgumentValue>
                                      <InArgument x:TypeArguments="x:String">[Config("Slack_Channel_error").ToString]</InArgument>
                                    </ucm:CodeGenEntityField.ArgumentValue>
                                  </ucm:CodeGenEntityField>
                                  <ucm:CodeGenEntityField x:TypeArguments="x:String" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="전송할 메시지" DisplayName="Text" FieldName="Text" FormDataType="ExpressionTextBox" InArgumentValue="[&quot;&lt;@U04JC0MLJMP&gt;&quot; +Environment.NewLine + &quot;[&quot;+Config(&quot;ProcessName&quot;).ToString+&quot;]&quot; + Environment.NewLine + &#xA;Config(&quot;LogMessage_ApplicationException&quot;).ToString+&quot; Retry: &quot;+RetryNumber.ToString+ Environment.NewLine +&#xA;&quot;초기화에서 Stop Process...&quot;]" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                                    <ucm:CodeGenEntityField.ArgumentValue>
                                      <InArgument x:TypeArguments="x:String" xml:space="preserve">["&lt;@U04JC0MLJMP&gt;" +Environment.NewLine + "["+Config("ProcessName").ToString+"]" + Environment.NewLine + 
Config("LogMessage_ApplicationException").ToString+" Retry: "+RetryNumber.ToString+ Environment.NewLine +
"초기화에서 Stop Process..."]</InArgument>
                                    </ucm:CodeGenEntityField.ArgumentValue>
                                  </ucm:CodeGenEntityField>
                                  <ucm:CodeGenEntityField x:TypeArguments="x:String" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="메시지에 첨부할 파일" DisplayName="File" FieldName="File" FormDataType="FilePicker" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                                  <ucm:CodeGenEntityField x:TypeArguments="x:Boolean" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:Boolean" DataType="Boolean" Description="이 메시지를 사용자 또는 봇으로 전송합니다. 기본값은 true(사용자로 전송)입니다." DisplayName="As User" FieldName="As User" FormDataType="ExpressionTextBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                                  <ucm:CodeGenEntityField x:TypeArguments="usm1:Message" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="Out" ArgumentType="usm1:Message" DataType="Message" Description="전송된 메시지" DisplayName="Message" FieldName="Message" FormDataType="ExpressionTextBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                                </scg:List>
                              </usam:SendMessage.SelectedFields>
                              <usam:SendMessage.ServiceFactory>
                                <uss:SlackServiceFactory />
                              </usam:SendMessage.ServiceFactory>
                              <usam:SendMessage.TelemetryProperties>
                                <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                              </usam:SendMessage.TelemetryProperties>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </usam:SendMessage>
                          </Sequence>
                        </ActivityAction>
                      </usa:SlackScopeActivity.Body>
                      <usa:SlackScopeActivity.ConnectionParameters>
                        <scg:List x:TypeArguments="ucmc:ConnectionParam" Capacity="4">
                          <ucmc:ConnectionParam Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" Description="OAuth 액세스 토큰" Mandatory="True" Name="API Token">
                            <ucmc:ConnectionParam.ArgumentValue>
                              <InArgument x:TypeArguments="x:String">[Config("Slack_botToken").ToString]</InArgument>
                            </ucmc:ConnectionParam.ArgumentValue>
                          </ucmc:ConnectionParam>
                        </scg:List>
                      </usa:SlackScopeActivity.ConnectionParameters>
                      <usa:SlackScopeActivity.DesignConnectionParameters>
                        <scg:List x:TypeArguments="ucmc:ConnectionParam" Capacity="4">
                          <ucmc:ConnectionParam ArgumentValue="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" Description="OAuth 액세스 토큰" Mandatory="True" Name="API Token" Value="Config(&quot;Slack_userToken&quot;).ToString" />
                        </scg:List>
                      </usa:SlackScopeActivity.DesignConnectionParameters>
                      <usa:SlackScopeActivity.DesignConnectionRequest>
                        <usm:SlackConnectionParameters APIKey="{x:Null}" BaseUrl="{x:Null}" BearerToken="{x:Null}" ClientId="{x:Null}" ClientSecret="{x:Null}" ConfigFileClient="{x:Null}" ConfigFilePath="{x:Null}" ExistingConnection="{x:Null}" JWTToken="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" PersonalAccessTokenName="{x:Null}" PersonalAccessTokenSecret="{x:Null}" SwaggerClient="{x:Null}" Username="{x:Null}" APIToken="Config(&quot;Slack_UserToken&quot;).ToString" AuthType="ApiToken">
                          <usm:SlackConnectionParameters.Scopes>
                            <use:SlackScopes>PublicChannels, PrivateChannels, DirectMessage, GroupMessage, Files, Users, Chat, UserGroups, Calls, DND, Emoji, Identity, Pins, Reminders, Reactions, Stars</use:SlackScopes>
                          </usm:SlackConnectionParameters.Scopes>
                        </usm:SlackConnectionParameters>
                      </usa:SlackScopeActivity.DesignConnectionRequest>
                      <usa:SlackScopeActivity.ServiceFactory>
                        <uss:SlackServiceFactory />
                      </usa:SlackScopeActivity.ServiceFactory>
                      <usa:SlackScopeActivity.SupportedAuthTypes>
                        <scg:List x:TypeArguments="x:String" Capacity="4">
                          <x:String>Existing Connection</x:String>
                          <x:String>OAuth Authorization Code</x:String>
                          <x:String>API Token</x:String>
                        </scg:List>
                      </usa:SlackScopeActivity.SupportedAuthTypes>
                      <usa:SlackScopeActivity.TelemetryProperties>
                        <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                      </usa:SlackScopeActivity.TelemetryProperties>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsPinned">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </usa:SlackScopeActivity>
                  </Transition.Action>
                  <Transition.Condition>[SystemException IsNot Nothing]</Transition.Condition>
                </Transition>
                <Transition DisplayName="Successful" sap:VirtualizedContainerService.HintSize="448.8,272.8" sap2010:WorkflowViewState.IdRef="Transition_10">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">349.8,114.1 349.8,144.1 349.7,144.1 349.7,261.5</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">38</x:Int32>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID3</x:Reference>
                  </Transition.To>
                  <Transition.Condition>[SystemException is Nothing]</Transition.Condition>
                </Transition>
              </State.Transitions>
            </State>
          </Transition.To>
          <Transition.Action>
            <usa:SlackScopeActivity Connection="{x:Null}" ExistingConnection="{x:Null}" SwaggerClient="{x:Null}" DesignConnectionEnabled="True" DisplayName="Slack Scope" ExistingConnectionType="usm:SlackConnection" sap:VirtualizedContainerService.HintSize="459.2,480.8" sap2010:WorkflowViewState.IdRef="SlackScopeActivity_2" RefreshCacheEnabled="False" Scopes="PublicChannels, PrivateChannels, DirectMessage, GroupMessage, Files, Users, Chat, UserGroups, Calls, DND, Emoji, Identity, Pins, Reminders, Reactions, Stars" SelectedAuthType="API Token" SelectedDesignAuthType="API Token" TelemetryEnabled="False" ThrowExceptionOnError="False">
              <usa:SlackScopeActivity.Body>
                <ActivityAction x:TypeArguments="ubac:ScopeActivityContext">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ubac:ScopeActivityContext" Name="ScopeActivityContext" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="실행" sap:VirtualizedContainerService.HintSize="425.6,329.6" sap2010:WorkflowViewState.IdRef="Sequence_34">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <usam:SendMessage BusinessEntityName="{x:Null}" ScopeActivityType="{x:Null}" Status="{x:Null}" ConfiguredBusinessEntity="SendMessage" CrudOperation="Function" DesignConnectionEnabled="True" DisplayName="Send Message" sap:VirtualizedContainerService.HintSize="384,236.8" sap2010:WorkflowViewState.IdRef="SendMessage_3">
                      <usam:SendMessage.BusinessEntity>
                        <ubme:BusinessEntity AuthFields="{x:Null}" Connection="{x:Null}" Id="{x:Null}" Metadata="{x:Reference __ReferenceID4}" Name="SendMessage">
                          <ubme:BusinessEntity.AllFields>
                            <scg:List x:TypeArguments="ubme:EntityField" Capacity="0" />
                          </ubme:BusinessEntity.AllFields>
                          <ubme:BusinessEntity.EntityMetadata>
                            <ubme:EntityMetadata Description="{x:Null}" PrimaryFields="{x:Null}" EligibleOperations="-1" IsCustomEntity="False" Name="SendMessage">
                              <ubme:EntityMetadata.Metadata>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object" x:Name="__ReferenceID4" />
                              </ubme:EntityMetadata.Metadata>
                            </ubme:EntityMetadata>
                          </ubme:BusinessEntity.EntityMetadata>
                          <ubme:BusinessEntity.SelectedFields>
                            <scg:List x:TypeArguments="ubme:EntityField" Capacity="0" />
                          </ubme:BusinessEntity.SelectedFields>
                          <ubme:BusinessEntity.TelemetryProperties>
                            <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                          </ubme:BusinessEntity.TelemetryProperties>
                        </ubme:BusinessEntity>
                      </usam:SendMessage.BusinessEntity>
                      <usam:SendMessage.PopulatedAPIParameters>
                        <scg:Dictionary x:TypeArguments="x:String, ubme:EntityField" />
                      </usam:SendMessage.PopulatedAPIParameters>
                      <usam:SendMessage.SelectedFields>
                        <scg:List x:TypeArguments="ubme:EntityField" Capacity="8">
                          <ucm:CodeGenEntityField x:TypeArguments="use:ConversationType" ArgumentValue="{x:Null}" ContainingType="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" ArgumentDirection="In" ArgumentType="use:ConversationType" DataType="ConversationType" Description="메시지를 가져올 대화 유형" DisplayName="Conversation Type" FieldName="Conversation Type" FormDataType="ComboBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="True">
                            <ucm:CodeGenEntityField.DefaultValue>
                              <use:ConversationType>Channel</use:ConversationType>
                            </ucm:CodeGenEntityField.DefaultValue>
                            <ucm:CodeGenEntityField.Value>
                              <use:ConversationType>Channel</use:ConversationType>
                            </ucm:CodeGenEntityField.Value>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="채널의 이름" DisplayName="Channel Name" FieldName="Channel Name" FormDataType="TextBoxWithButton" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                            <ucm:CodeGenEntityField.Metadata>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <ube:WindowType x:Key="WindowType">FindObject</ube:WindowType>
                                <ubmv:FindObjectInput ParentQuery="{x:Null}" ParentQueryLabel="{x:Null}" Query="{x:Null}" x:Key="WindowTypeInput" IsMultiSelectAllowed="False" ObjectType="Channel" ReturnColumn="Name" ShouldLoadOnStart="False" WindowName="Channel">
                                  <ubmv:FindObjectInput.ColumnsToShow>
                                    <scg:List x:TypeArguments="x:String" Capacity="4">
                                      <x:String>Id</x:String>
                                      <x:String>Name</x:String>
                                    </scg:List>
                                  </ubmv:FindObjectInput.ColumnsToShow>
                                  <ubmv:FindObjectInput.Metadata>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:String x:Key="ChannelTypesKey">public_channel,private_channel</x:String>
                                    </scg:Dictionary>
                                  </ubmv:FindObjectInput.Metadata>
                                  <ubmv:FindObjectInput.QueryFilterColumns>
                                    <scg:List x:TypeArguments="x:String" Capacity="4">
                                      <x:String>Id</x:String>
                                      <x:String>Name</x:String>
                                    </scg:List>
                                  </ubmv:FindObjectInput.QueryFilterColumns>
                                </ubmv:FindObjectInput>
                              </scg:Dictionary>
                            </ucm:CodeGenEntityField.Metadata>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="채널의 ID" DisplayName="Channel ID" FieldName="Channel ID" FormDataType="ExpressionTextBox" InArgumentValue="[Config(&quot;Slack_Channel_error&quot;).ToString]" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                            <ucm:CodeGenEntityField.ArgumentValue>
                              <InArgument x:TypeArguments="x:String">[Config("Slack_Channel_error").ToString]</InArgument>
                            </ucm:CodeGenEntityField.ArgumentValue>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="전송할 메시지" DisplayName="Text" FieldName="Text" FormDataType="ExpressionTextBox" InArgumentValue="[&quot;&lt;@U04JC0MLJMP&gt;&quot; +Environment.NewLine + &quot;[&quot;+Config(&quot;ProcessName&quot;).ToString+&quot;]&quot; + Environment.NewLine + &#xA;Config(&quot;LogMessage_ApplicationException&quot;).ToString+&quot; Retry: &quot;+RetryNumber.ToString + Environment.NewLine +&#xA;SystemException.Message.ToString+&quot; at Source: &quot;+ Environment.NewLine +&#xA;SystemException.Source.ToString]" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False">
                            <ucm:CodeGenEntityField.ArgumentValue>
                              <InArgument x:TypeArguments="x:String" xml:space="preserve">["&lt;@U04JC0MLJMP&gt;" +Environment.NewLine + "["+Config("ProcessName").ToString+"]" + Environment.NewLine + 
Config("LogMessage_ApplicationException").ToString+" Retry: "+RetryNumber.ToString + Environment.NewLine +
SystemException.Message.ToString+" at Source: "+ Environment.NewLine +
SystemException.Source.ToString]</InArgument>
                            </ucm:CodeGenEntityField.ArgumentValue>
                          </ucm:CodeGenEntityField>
                          <ucm:CodeGenEntityField x:TypeArguments="x:String" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" DataType="String" Description="메시지에 첨부할 파일" DisplayName="File" FieldName="File" FormDataType="FilePicker" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                          <ucm:CodeGenEntityField x:TypeArguments="x:Boolean" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:Boolean" DataType="Boolean" Description="이 메시지를 사용자 또는 봇으로 전송합니다. 기본값은 true(사용자로 전송)입니다." DisplayName="As User" FieldName="As User" FormDataType="ExpressionTextBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                          <ucm:CodeGenEntityField x:TypeArguments="usm1:Message" ArgumentValue="{x:Null}" ContainingType="{x:Null}" DefaultValue="{x:Null}" FieldFullName="{x:Null}" InArgumentValue="{x:Null}" InOutArgumentValue="{x:Null}" Metadata="{x:Null}" OriginalArgumentType="{x:Null}" OutArgumentValue="{x:Null}" SampleValue="{x:Null}" Value="{x:Null}" ArgumentDirection="Out" ArgumentType="usm1:Message" DataType="Message" Description="전송된 메시지" DisplayName="Message" FieldName="Message" FormDataType="ExpressionTextBox" IsCustomField="False" IsDefault="False" IsDeletable="True" IsIdField="False" IsSelected="False" Mandatory="False" ShouldFilterOnChange="False" />
                        </scg:List>
                      </usam:SendMessage.SelectedFields>
                      <usam:SendMessage.ServiceFactory>
                        <uss:SlackServiceFactory />
                      </usam:SendMessage.ServiceFactory>
                      <usam:SendMessage.TelemetryProperties>
                        <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
                      </usam:SendMessage.TelemetryProperties>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsPinned">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </usam:SendMessage>
                  </Sequence>
                </ActivityAction>
              </usa:SlackScopeActivity.Body>
              <usa:SlackScopeActivity.ConnectionParameters>
                <scg:List x:TypeArguments="ucmc:ConnectionParam" Capacity="4">
                  <ucmc:ConnectionParam Value="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" Description="OAuth 액세스 토큰" Mandatory="True" Name="API Token">
                    <ucmc:ConnectionParam.ArgumentValue>
                      <InArgument x:TypeArguments="x:String">[Config("Slack_botToken").ToString]</InArgument>
                    </ucmc:ConnectionParam.ArgumentValue>
                  </ucmc:ConnectionParam>
                </scg:List>
              </usa:SlackScopeActivity.ConnectionParameters>
              <usa:SlackScopeActivity.DesignConnectionParameters>
                <scg:List x:TypeArguments="ucmc:ConnectionParam" Capacity="4">
                  <ucmc:ConnectionParam ArgumentValue="{x:Null}" ArgumentDirection="In" ArgumentType="x:String" Description="OAuth 액세스 토큰" Mandatory="True" Name="API Token" Value="Config(&quot;Slack_userToken&quot;).ToString" />
                </scg:List>
              </usa:SlackScopeActivity.DesignConnectionParameters>
              <usa:SlackScopeActivity.DesignConnectionRequest>
                <usm:SlackConnectionParameters APIKey="{x:Null}" BaseUrl="{x:Null}" BearerToken="{x:Null}" ClientId="{x:Null}" ClientSecret="{x:Null}" ConfigFileClient="{x:Null}" ConfigFilePath="{x:Null}" ExistingConnection="{x:Null}" JWTToken="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" PersonalAccessTokenName="{x:Null}" PersonalAccessTokenSecret="{x:Null}" SwaggerClient="{x:Null}" Username="{x:Null}" APIToken="Config(&quot;Slack_userToken&quot;).ToString" AuthType="ApiToken">
                  <usm:SlackConnectionParameters.Scopes>
                    <use:SlackScopes>PublicChannels, PrivateChannels, DirectMessage, GroupMessage, Files, Users, Chat, UserGroups, Calls, DND, Emoji, Identity, Pins, Reminders, Reactions, Stars</use:SlackScopes>
                  </usm:SlackConnectionParameters.Scopes>
                </usm:SlackConnectionParameters>
              </usa:SlackScopeActivity.DesignConnectionRequest>
              <usa:SlackScopeActivity.ServiceFactory>
                <uss:SlackServiceFactory />
              </usa:SlackScopeActivity.ServiceFactory>
              <usa:SlackScopeActivity.SupportedAuthTypes>
                <scg:List x:TypeArguments="x:String" Capacity="4">
                  <x:String>Existing Connection</x:String>
                  <x:String>OAuth Authorization Code</x:String>
                  <x:String>API Token</x:String>
                </scg:List>
              </usa:SlackScopeActivity.SupportedAuthTypes>
              <usa:SlackScopeActivity.TelemetryProperties>
                <scg:Dictionary x:TypeArguments="ubt:TelemetryGroup, scg:IDictionary(x:String, x:String)" />
              </usa:SlackScopeActivity.TelemetryProperties>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </usa:SlackScopeActivity>
          </Transition.Action>
          <Transition.Condition>
            <mva:VisualBasicValue x:TypeArguments="x:Boolean" ExpressionText="SystemException IsNot Nothing" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_2" />
          </Transition.Condition>
        </Transition>
        <Transition DisplayName="Success" sap2010:WorkflowViewState.IdRef="Transition_11">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:PointCollection x:Key="ConnectorLocation">349.7,455.9 349.7,485.9 350,485.9 350,548.5</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">38</x:Int32>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <x:Reference>__ReferenceID1</x:Reference>
          </Transition.To>
          <Transition.Condition>[SystemException Is Nothing And BusinessException is Nothing]</Transition.Condition>
        </Transition>
      </State.Transitions>
    </State>
    <x:Reference>__ReferenceID1</x:Reference>
    <x:Reference>__ReferenceID5</x:Reference>
    <StateMachine.Variables>
      <Variable x:TypeArguments="ui:QueueItem" sap2010:Annotation.AnnotationText="Transaction item to be processed. The type of this variable can be changed to match the transaction type in the process. For example, when processing data from a spreadsheet that is read into a DataTable, this type can be changed to DataRow. " Name="TransactionItem" />
      <Variable x:TypeArguments="s:Exception" sap2010:Annotation.AnnotationText="Used during transitions between states to represent exceptions other than business exceptions." Name="SystemException" />
      <Variable x:TypeArguments="ui:BusinessRuleException" sap2010:Annotation.AnnotationText="Used during transitions between states and represents a situation that does not conform to the rules of the process being automated." Name="BusinessException" />
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Sequential counter of transaction items." Default="1" Name="TransactionNumber" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="Config" />
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Used to control the number of attempts of retrying the transaction processing in case of system exceptions." Default="0" Name="RetryNumber" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Optionally used to include additional information about the transaction item." Name="TransactionField2" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Optionally used to include additional information about the transaction item." Name="TransactionField1" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Transaction ID used for information and logging purposes. Ideally, the ID should be unique for each transaction. " Name="TransactionID" />
      <Variable x:TypeArguments="x:String" Name="gsuiteUserEmail" />
      <Variable x:TypeArguments="x:String" Name="gsuiteKeypath" />
      <Variable x:TypeArguments="x:String" Name="gsuiteUser" />
      <Variable x:TypeArguments="x:String" Name="gsuiteClientID" />
      <Variable x:TypeArguments="x:String" Name="gsuiteClientSecret" />
    </StateMachine.Variables>
  </StateMachine>
</Activity>